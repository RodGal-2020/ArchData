devtools::document()
# To install as local package
devtools::install()
params = ls()
params = params[!params %in% function_names]
params = ls()
params = params[!params %in% get("function_names")]
1+1
library(devtools)
renv::status()
renv::restore()
renv::status()
renv::snapshot()
cat("Change version manually in the DESCRIPTION file")
devtools::document() # To update the documentation
devtools::document() # To update the documentation
devtools::install() # To install as local package
devtools::check(error_on = "error")
ArchiData::setup()
ArchiData::inspect_environment()
ArchiData::glance("function_names")
p_name = "function_names"
# message("ðŸ”Ž p_name = ", p_name)
p_value <- eval(as.name(p_name))
l_p_value = length(p_value)
l_p_value
l_p_value > 1
if (l_p_value > 1) {
# Print a general message and then, for each value, a new subline with the value
message(paste0("ðŸ”Ž ", crayon::cyan(p_name), " = "))
for (i in 1:l_p_value) {
message(paste0("\t", p_value[i]))
}
} else {
message(paste0("ðŸ”Ž ", p_name, " =\n\t", p_value))
}
params = ls()
get("function_names")
params[!params %in% get("function_names")]
params[!params %in% get("not_for_printing")]
get("not_for_printing")
ArchiData::setup()
params = ls()
params[!params %in% get("function_names")]
params
params[!params %in% get("not_for_printing")]
# Print information about each parameter already in the environment
for (p in params) {
ArchiData::glance(p)
}
p
ArchiData::glance(p)
ArchiData::glance("p")
p
as.name(p)
ArchiData::glance(as.name(p))
ArchiData::glance(as.symbol(p))
as.symbol(p)
p_string = as.symbol(p)
p_string
p_string = as.name(p)
p_string
(p_string = as.symbol(p))
(p_string = as.name(p))
type(p_string)
typeof(p_string)
(p_string = as.name(p))
typeof(p_string)
(p_string = as.symbol(p))
typeof(p_string)
(p_string = as.name(p))
typeof(p_string)
(p_string = as.character(as.name(p)))
typeof(p_string)
ArchiData::glance(p_string)
p_name = "p_name"
as.name(p_name)
eval(as.name(p_name))
# message("ðŸ”Ž p_name = ", p_name)
p_value <- eval(as.name(p_name))
l_p_value = length(p_value)
if (l_p_value > 1) {
# Print a general message and then, for each value, a new subline with the value
message(paste0("ðŸ”Ž ", crayon::cyan(p_name), " = "))
for (i in 1:l_p_value) {
message(paste0("\t", p_value[i]))
}
} else {
message(paste0("ðŸ”Ž ", p_name, " =\n\t", p_value))
}
p_name = p_string
as.name(p_name)
eval(as.name(p_name))
params = ls()
params = params[!params %in% get("function_names")] # Avoid functions
params = params[!params %in% get("not_for_printing")] # Avoid non-printable
# Print information about each parameter already in the environment
for (p in params) {
(p_string = as.symbol(p))
typeof(p_string)
(p_string = as.character(as.name(p)))
typeof(p_string)
ArchiData::glance(p_string) # glance("x")
}
devtools::document() # To update the documentation
devtools::install() # To install as local package
ArchiData::setup()
devtools::document() # To update the documentation
renv::restore()
devtools::document() # To update the documentation
devtools::install() # To install as local package
ArchiData::setup()
ArchiData::setup()
ArchiData::inspect_environment()
params = ls()
params = params[!params %in% get("function_names")] # Avoid functions
params = params[!params %in% get("not_for_printing")] # Avoid non-printable
# Print information about each parameter already in the environment
for (p in params) {
(p_string = as.symbol(p))
typeof(p_string)
(p_string = as.character(as.name(p)))
typeof(p_string)
ArchiData::glance(p_string) # glance("x")
}
devtools::document() # To update the documentation
devtools::install() # To install as local package
renv::restore()
devtools::document() # To update the documentation
devtools::install() # To install as local package
ArchiData::setup()
ArchiData::inspect_environment()
functions = list(
"example_function" = function() {print("1")}
)
functions["example_functoin"]
functions["example_function"]
functions["example_function"](2)
functions$example_function(2)
functions$example_function()
is.list(functions)
other_parameters = list(
emojis = list(
"informative" = "ðŸ”Ž"
)
)
other_parameters
other_parameters$emojis$informative
files = list(
data = c(
"data/data_1.csv",
"data/data_2.csv"
),
aux_files = c()
)
files
ArchiData::setup()
ArchiData::inspect_environment()
source("a = function(){print("b"")}")
source("a = function(){print("b")}")
source("a = function(){print('b')}")
source("config/parameters.R") # Made in .onLoad in zzz.R
params = ls(envir=.GlobalEnv) # Really important to have the parameter
params
params == "other_parameters"
params[params == "other_parameters" || params == files]
params[params == "other_parameters" | params == files]
params[params == "other_parameters" || params == "files"]
params[params == "other_parameters" | params == "files"]
params
##########################################
# Aux functions
get_depth = function(this,thisdepth=0){
if(!is.list(this)){
return(thisdepth)
}else{
return(max(unlist(lapply(this,get_depth,thisdepth=thisdepth+1))))
}
}
get_depth(list(list("1")))
ls(envir=.GlobalEnv)
read_yaml(text="- hey\n- hi\n- hello")
install.packages("yaml")
yaml::read_yaml(text="- hey\n- hi\n- hello")
yaml::read_yaml(text="- hey\n- hi\n- hello: 1")
yaml::read_yaml("config/parameters.yaml")
yaml::read_yaml("config/parameters.yaml")
yaml.load_file("config/parameters.yaml")
yaml::yaml.load_file("config/parameters.yaml")
renv::status()
renv::snapshot()
renv::status()
devtools::document() # To update the documentation
devtools::document() # To update the documentation
devtools::install() # To install as local package
3
ArchiData::UTCI(24, 24, 1.5, 60)
devtools::document() # To update the documentation
devtools::install() # To install as local package
devtools::document() # To update the documentation
renv::status()
renv::restore()
devtools::document() # To update the documentation
devtools::install() # To install as local package
devtools::document() # To update the documentation
devtools::install() # To install as local package
packageDescription("ArchiData", fields = "Version")
parts <- strsplit(packageVersion("ArchiData"), ".", fixed = TRUE)[[1]]
update.packages(ask = FALSE)
devtools::document() # To update the documentation
packageVersion("rlang")
devtools::install_github("r-lib/rlang")
remove.packages("rang")
remove.packages("rlang")
devtools::install_github("r-lib/rlang")
devtools::install_github("r-lib/rlang")
install.packages("rlang")
To elaborate on the comment, you can install the development version as set out on the github repo. The instructions there suggest using pak:pgk_install(). However if you do not have this package you can also use devtools::install_github().
To elaborate on the comment, you can install the development version as set out on the github repo. The instructions there suggest using pak:pgk_install(). However if you do not have this package you can also use devtools::install_github().
packageVersion("rlang") # â€˜1.0.6â€™
install.packages("rlang")
packageVersion("rlang") # â€˜1.0.6â€™
renv::status()
renv::restore()
devtools::document() # To update the documentation
devtools::install() # To install as local package
renv::status()
renv::snapshot()
multi_outliers(iris)
ArchiData::multi_outliers(iris)
devtools::document() # To update the documentation
devtools::install() # To install as local package
multi_outliers(iris)
ArchiData::multi_outliers(iris)
data = iris
x_var= "Petal.width"
ggplot(data, aes(x = .data[[x_var]])) +
geom_boxplot(width = 0.2, color = "black", fill = "grey", outlier.color = "red", outlier.shape = 18, outlier.size = 3) +
theme_minimal() +
labs(x = x_label, title = title)
library(ggplot2)
ggplot(data, aes(x = .data[[x_var]])) +
geom_boxplot(width = 0.2, color = "black", fill = "grey", outlier.color = "red", outlier.shape = 18, outlier.size = 3) +
theme_minimal() +
labs(x = x_label, title = title)
library(ggplot2)
renv::status()
renv::restore()
ggplot(data, aes(x = .data[[x_var]])) +
geom_boxplot(width = 0.2, color = "black", fill = "grey", outlier.color = "red", outlier.shape = 18, outlier.size = 3) +
theme_minimal() +
labs(x = x_label, title = title)
library(ggplot2)
ggplot(data, aes(x = .data[[x_var]])) +
geom_boxplot(width = 0.2, color = "black", fill = "grey", outlier.color = "red", outlier.shape = 18, outlier.size = 3) +
theme_minimal() +
labs(x = x_label, title = title)
x_label = ""
title = ""
ggplot(data, aes(x = .data[[x_var]])) +
geom_boxplot(width = 0.2, color = "black", fill = "grey", outlier.color = "red", outlier.shape = 18, outlier.size = 3) +
theme_minimal() +
labs(x = x_label, title = title)
iris
x_var = "Petal.Width"
ggplot(data, aes(x = .data[[x_var]])) +
geom_boxplot(width = 0.2, color = "black", fill = "grey", outlier.color = "red", outlier.shape = 18, outlier.size = 3) +
theme_minimal() +
labs(x = x_label, title = title)
boxplots = list()
numeric_data = data %>% ArchiData::get_numeric()
library(magrittr)
data = iris
numeric_data = data %>% ArchiData::get_numeric()
fill_color <- hcl.colors(length(names(numeric_data)))[match(var, names(numeric_data))]
fill_color
boxplots = list()
for (var in names(numeric_data)) {
fill_color <- hcl.colors(length(names(numeric_data)))[match(var, names(numeric_data))]
boxplots[[var]] == ArchiData::print_boxplot(numeric_data, var, fill_color)
}
output$boxplots = boxplots
output = list()
output$boxplots = boxplots
gridExtra::grid.arrange(grobs = boxplots, ncol = 4)
boxplots
names(numeric_data)
boxplots = list()
for (var in names(numeric_data)) {
fill_color <- hcl.colors(length(names(numeric_data)))[match(var, names(numeric_data))]
boxplots[[var]] == ArchiData::print_boxplot(numeric_data, var, fill_color)
}
boxplots
for (var in names(numeric_data)) {
fill_color <- hcl.colors(length(names(numeric_data)))[match(var, names(numeric_data))]
boxplots %<>% append(ArchiData::print_boxplot(numeric_data, var, fill_color))
}
output$boxplots = boxplots
if (plot) {
gridExtra::grid.arrange(grobs = boxplots, ncol = 4)
}
gridExtra::grid.arrange(grobs = boxplots, ncol = 4)
boxplots
boxplots[[1]]
length(boxplots)
boxplots = list()
for (var in names(numeric_data)) {
fill_color <- hcl.colors(length(names(numeric_data)))[match(var, names(numeric_data))]
boxplots %<>% append(ArchiData::print_boxplot(numeric_data, var, fill_color))
}
length(boxplots)
boxplots = list()
for (var in names(numeric_data)) {
fill_color <- hcl.colors(length(names(numeric_data)))[match(var, names(numeric_data))]
boxplots %<>% append(list(ArchiData::print_boxplot(numeric_data, var, fill_color)))
}
output$boxplots = boxplots
gridExtra::grid.arrange(grobs = boxplots, ncol = 4)
devtools::document() # To update the documentation
devtools::install() # To install as local package
print_boxplot(iris, "Petal.Width")
renv::status
renv::status()
renv::restore()
print_boxplot(iris, "Petal.Width")
ArchiData::print_boxplot(iris, "Petal.Width")
devtools::document() # To update the documentation
devtools::install() # To install as local package
print_boxplot(iris, "Petal.Width")
devtools::install() # To install as local package
renv::restore()
print_boxplot(iris, "Petal.Width")
ArchiData::print_boxplot(iris, "Petal.Width")
rlang::last_trace()
data = iris; x_var = "Petal.Width"
# ggplot(data, aes(x = .data[[x_var]])) +
gg_boxplot = ggplot2::ggplot(data, ggplot2::aes(y = !!dplyr::sym(var))) +
ggplot2::geom_boxplot(width = 0.2, color = "black", fill = fill_color, outlier.color = "red", outlier.shape = 18, outlier.size = 2) +
ggplot2::theme_minimal() +
ArchiData::ggplot2_theme() +
ggplot2::labs(x = x_label, y = NULL, title = title)
ggplot2::ggplot(data, ggplot2::aes(y = !!dplyr::sym(var)))
# ggplot(data, aes(x = .data[[x_var]])) +
gg_boxplot = ggplot2::ggplot(data, ggplot2::aes(y = !!dplyr::sym(x_var))) +
ggplot2::geom_boxplot(width = 0.2, color = "black", fill = fill_color, outlier.color = "red", outlier.shape = 18, outlier.size = 2) +
ggplot2::theme_minimal() +
ArchiData::ggplot2_theme() +
ggplot2::labs(x = x_label, y = NULL, title = title)
fill_color = "skyblue"; x_label = ""; title = ""
data = iris; x_var = "Petal.Width"
# ggplot(data, aes(x = .data[[x_var]])) +
gg_boxplot = ggplot2::ggplot(data, ggplot2::aes(y = !!dplyr::sym(x_var))) +
ggplot2::geom_boxplot(width = 0.2, color = "black", fill = fill_color, outlier.color = "red", outlier.shape = 18, outlier.size = 2) +
ggplot2::theme_minimal() +
ArchiData::ggplot2_theme() +
ggplot2::labs(x = x_label, y = NULL, title = title)
gg_boxplot
dplyr::sym(x_var)
!!dplyr::sym(x_var)
devtools::document() # To update the documentation
devtools::install() # To install as local package
print_boxplot(iris, "Petal.Width)
")"
)
)
print_boxplot(iris, "Petal.Width")
ArchiData::print_boxplot(iris, "Petal.Width")
ArchiData::print_boxplot(iris, "Petal.Width")
devtools::install() # To install as local package
renv::restore()
ArchiData::print_boxplot(iris, "Petal.Width")
ArchiData::multi_outliers(iris)
library(ArchiData)
ArchiData::multi_outliers(iris)
devtools::load_all(".")
# fill_color = "skyblue"; title = ""
# data = iris; x_var = "Petal.Width"
gg_hist = data %>%
ggplot2::ggplot(ggplot2::aes(x = !!dplyr::sym(x_var))) +
ggplot2::labs(x = x_var, y = "Absolute frequency", title = title) +
ggplot2::theme_minimal() +
ArchiData::ggplot2_theme()
data = iris
# fill_color = "skyblue"; title = ""
# data = iris; x_var = "Petal.Width"
gg_hist = data %>%
ggplot2::ggplot(ggplot2::aes(x = !!dplyr::sym(x_var))) +
ggplot2::labs(x = x_var, y = "Absolute frequency", title = title) +
ggplot2::theme_minimal() +
ArchiData::ggplot2_theme()
# fill_color = "skyblue"; title = ""
data = iris; x_var = "Petal.Width"
# fill_color = "skyblue"; title = ""
# data = iris; x_var = "Petal.Width"
gg_hist = data %>%
ggplot2::ggplot(ggplot2::aes(x = !!dplyr::sym(x_var))) +
ggplot2::labs(x = x_var, y = "Absolute frequency", title = title) +
ggplot2::theme_minimal() +
ArchiData::ggplot2_theme()
renv::status()
devtools::document() # To update the documentation
devtools::install() # To install as local package
# fill_color = "skyblue"; title = ""
data = iris; x_var = "Petal.Width"
# fill_color = "skyblue"; title = ""
# data = iris; x_var = "Petal.Width"
gg_hist = data %>%
ggplot2::ggplot(ggplot2::aes(x = !!dplyr::sym(x_var))) +
ggplot2::labs(x = x_var, y = "Absolute frequency", title = title) +
ggplot2::theme_minimal() +
ArchiData::ggplot2_theme()
gg_hist
selected_data = data %>%
dplyr::select(!!dplyr::sym(x_var)) %>%
magrittr::extract2(1)
if (is.factor(selected_data) || is.character(selected_data)) {
gg_hist = gg_hist +
ggplot2::geom_bar(fill = fill_color, color = "white")
} else if (is.numeric(selected_data)) {
gg_hist = gg_hist +
ggplot2::geom_histogram(fill = fill_color, color = "white", bins = 30)
}
fill_color = "skyblue"; title = ""
# fill_color = "skyblue"; title = ""
# data = iris; x_var = "Petal.Width"
gg_hist = data %>%
ggplot2::ggplot(ggplot2::aes(x = !!dplyr::sym(x_var))) +
ggplot2::labs(x = x_var, y = "Absolute frequency", title = title) +
ggplot2::theme_minimal() +
ArchiData::ggplot2_theme()
selected_data = data %>%
dplyr::select(!!dplyr::sym(x_var)) %>%
magrittr::extract2(1)
if (is.factor(selected_data) || is.character(selected_data)) {
gg_hist = gg_hist +
ggplot2::geom_bar(fill = fill_color, color = "white")
} else if (is.numeric(selected_data)) {
gg_hist = gg_hist +
ggplot2::geom_histogram(fill = fill_color, color = "white", bins = 30)
}
gg_hist
devtools::install() # To install as local package
renv::restore()
ArchiData::multi_outliers(iris)
library(magrittr)
ArchiData::multi_outliers(iris)
data = iris; plot = TRUE
output = list()
# data = ggplot2::mpg
ncols = min(3, ncol(data))
numeric_data = data %>% ArchiData::get_numeric()
### Boxplots + Histograms
boxplots = list()
histograms = list()
for (var in names(data)) {
fill_color <- hcl.colors(length(names(data)))[match(var, names(data))]
if (var %in% names(numeric_data)) {
boxplots %<>% append(list(ArchiData::print_boxplot(numeric_data, var, fill_color = fill_color)))
}
histograms %<>% append(list(ArchiData::print_hist(numeric_data, var, fill_color = fill_color)))
}
renv::status()
renv::install("tidymodels")
renv::snapshot()
devtools::document() # To update the documentation
devtools::document() # To update the documentation
devtools::install() # To install as local package
ArchiData::multi_outliers(iris)
data = iris; plot = TRUE
output = list()
# data = ggplot2::mpg
ncols = min(3, ncol(data))
numeric_data = data %>% ArchiData::get_numeric()
### Boxplots + Histograms
boxplots = list()
histograms = list()
numeric_data = data %>% ArchiData::get_numeric(verbose = 0)
### Boxplots + Histograms
boxplots = list()
histograms = list()
fill_color <- hcl.colors(length(names(data)))[match(var, names(data))]
if (var %in% names(numeric_data)) {
boxplots %<>% append(list(ArchiData::print_boxplot(numeric_data, var, fill_color = fill_color)))
}
histograms %<>% append(list(ArchiData::print_hist(numeric_data, var, fill_color = fill_color)))
library(ArchiData)
multi_outliers(iris)
data %>% dplyr::select_if(is.numeric) %>% colnames()
ArchiData::print_boxplot(data, var, fill_color = fill_color)
ArchiData::print_hist(data, var, fill_color = fill_color)
# Guardado
renv::snapshot()
devtools::document() # To update the documentation
devtools::install() # To install as local package
renv::restore()
devtools::install() # To install as local package
ArchiData::print_hist(iris, "Petal.Width")
library(magrittr)
ArchiData::print_hist(iris, "Petal.Width")
ArchiData::multi_outliers(iris)
ArchiData::print_boxplot(iris, "Petal.Width")
devtools::document() # To update the documentation
devtools::install() # To install as local package
print_boxplot(iris, "Petal.Width")
ArchiData::print_boxplot(iris, "Petal.Width")
renv::restore()
devtools::document() # To update the documentation
devtools::install() # To install as local package
ArchiData::print_boxplot(iris, "Petal.Width")
usethis::use_github_action("check-standard")
renv::restore()
usethis::use_github_action("check-standard")
