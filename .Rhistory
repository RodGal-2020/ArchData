# To update the documentation
devtools::document()
# To install as local package
devtools::install()
devtools::install_github("RodGal-2020/ArchiData")
library(ArchData)
library(ArchiData)
# To update the documentation
devtools::document()
# To update the documentation
devtools::document()
# To update the documentation
devtools::document()
# To install as local package
devtools::install()
# To update the documentation
devtools::document()
# To install as local package
devtools::install()
library(ArchiData)
detach("package:ArchData", unload = TRUE)
# To update the documentation
devtools::document()
# To install as local package
devtools::install()
params = ls()
params = params[!params %in% function_names]
params = ls()
params = params[!params %in% get("function_names")]
1+1
library(devtools)
renv::status()
renv::restore()
renv::status()
renv::snapshot()
cat("Change version manually in the DESCRIPTION file")
devtools::document() # To update the documentation
devtools::document() # To update the documentation
devtools::install() # To install as local package
devtools::check(error_on = "error")
ArchiData::setup()
ArchiData::inspect_environment()
ArchiData::glance("function_names")
p_name = "function_names"
# message("ðŸ”Ž p_name = ", p_name)
p_value <- eval(as.name(p_name))
l_p_value = length(p_value)
l_p_value
l_p_value > 1
if (l_p_value > 1) {
# Print a general message and then, for each value, a new subline with the value
message(paste0("ðŸ”Ž ", crayon::cyan(p_name), " = "))
for (i in 1:l_p_value) {
message(paste0("\t", p_value[i]))
}
} else {
message(paste0("ðŸ”Ž ", p_name, " =\n\t", p_value))
}
params = ls()
get("function_names")
params[!params %in% get("function_names")]
params[!params %in% get("not_for_printing")]
get("not_for_printing")
ArchiData::setup()
params = ls()
params[!params %in% get("function_names")]
params
params[!params %in% get("not_for_printing")]
# Print information about each parameter already in the environment
for (p in params) {
ArchiData::glance(p)
}
p
ArchiData::glance(p)
ArchiData::glance("p")
p
as.name(p)
ArchiData::glance(as.name(p))
ArchiData::glance(as.symbol(p))
as.symbol(p)
p_string = as.symbol(p)
p_string
p_string = as.name(p)
p_string
(p_string = as.symbol(p))
(p_string = as.name(p))
type(p_string)
typeof(p_string)
(p_string = as.name(p))
typeof(p_string)
(p_string = as.symbol(p))
typeof(p_string)
(p_string = as.name(p))
typeof(p_string)
(p_string = as.character(as.name(p)))
typeof(p_string)
ArchiData::glance(p_string)
p_name = "p_name"
as.name(p_name)
eval(as.name(p_name))
# message("ðŸ”Ž p_name = ", p_name)
p_value <- eval(as.name(p_name))
l_p_value = length(p_value)
if (l_p_value > 1) {
# Print a general message and then, for each value, a new subline with the value
message(paste0("ðŸ”Ž ", crayon::cyan(p_name), " = "))
for (i in 1:l_p_value) {
message(paste0("\t", p_value[i]))
}
} else {
message(paste0("ðŸ”Ž ", p_name, " =\n\t", p_value))
}
p_name = p_string
as.name(p_name)
eval(as.name(p_name))
params = ls()
params = params[!params %in% get("function_names")] # Avoid functions
params = params[!params %in% get("not_for_printing")] # Avoid non-printable
# Print information about each parameter already in the environment
for (p in params) {
(p_string = as.symbol(p))
typeof(p_string)
(p_string = as.character(as.name(p)))
typeof(p_string)
ArchiData::glance(p_string) # glance("x")
}
devtools::document() # To update the documentation
devtools::install() # To install as local package
ArchiData::setup()
devtools::document() # To update the documentation
renv::restore()
devtools::document() # To update the documentation
devtools::install() # To install as local package
ArchiData::setup()
ArchiData::setup()
ArchiData::inspect_environment()
params = ls()
params = params[!params %in% get("function_names")] # Avoid functions
params = params[!params %in% get("not_for_printing")] # Avoid non-printable
# Print information about each parameter already in the environment
for (p in params) {
(p_string = as.symbol(p))
typeof(p_string)
(p_string = as.character(as.name(p)))
typeof(p_string)
ArchiData::glance(p_string) # glance("x")
}
devtools::document() # To update the documentation
devtools::install() # To install as local package
renv::restore()
devtools::document() # To update the documentation
devtools::install() # To install as local package
ArchiData::setup()
ArchiData::inspect_environment()
functions = list(
"example_function" = function() {print("1")}
)
functions["example_functoin"]
functions["example_function"]
functions["example_function"](2)
functions$example_function(2)
functions$example_function()
is.list(functions)
other_parameters = list(
emojis = list(
"informative" = "ðŸ”Ž"
)
)
other_parameters
other_parameters$emojis$informative
files = list(
data = c(
"data/data_1.csv",
"data/data_2.csv"
),
aux_files = c()
)
files
ArchiData::setup()
ArchiData::inspect_environment()
source("a = function(){print("b"")}")
source("a = function(){print("b")}")
source("a = function(){print('b')}")
source("config/parameters.R") # Made in .onLoad in zzz.R
params = ls(envir=.GlobalEnv) # Really important to have the parameter
params
params == "other_parameters"
params[params == "other_parameters" || params == files]
params[params == "other_parameters" | params == files]
params[params == "other_parameters" || params == "files"]
params[params == "other_parameters" | params == "files"]
params
##########################################
# Aux functions
get_depth = function(this,thisdepth=0){
if(!is.list(this)){
return(thisdepth)
}else{
return(max(unlist(lapply(this,get_depth,thisdepth=thisdepth+1))))
}
}
get_depth(list(list("1")))
ls(envir=.GlobalEnv)
read_yaml(text="- hey\n- hi\n- hello")
install.packages("yaml")
yaml::read_yaml(text="- hey\n- hi\n- hello")
yaml::read_yaml(text="- hey\n- hi\n- hello: 1")
yaml::read_yaml("config/parameters.yaml")
yaml::read_yaml("config/parameters.yaml")
yaml.load_file("config/parameters.yaml")
yaml::yaml.load_file("config/parameters.yaml")
renv::status()
renv::snapshot()
renv::status()
devtools::document() # To update the documentation
devtools::document() # To update the documentation
devtools::install() # To install as local package
3
ArchiData::UTCI(24, 24, 1.5, 60)
devtools::document() # To update the documentation
devtools::install() # To install as local package
devtools::document() # To update the documentation
renv::status()
renv::restore()
devtools::document() # To update the documentation
devtools::install() # To install as local package
devtools::document() # To update the documentation
devtools::install() # To install as local package
